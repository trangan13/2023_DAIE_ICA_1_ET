\#' @title 1_Local_SQLite.R

\#' @description Connecting querying and modifying a local SQLite DB file

\#' @author NMCG

\#' @bugs None

\#' @keywords SQL, DBI, query, execute, tabular, local

\#' @see <https://cran.r-project.org/web/packages/RSQLite/vignettes/RSQLite.html>

\#' @seealso <https://datacarpentry.org/R-ecology-lesson/05-r-and-databases.html>

## Clear console on each execute

```{r echo=TRUE}
# Clear console on each execute 
cat('\014')
```

```{r echo=FALSE}
# Set a CRAN mirror for package installation, this was done as I was getting an error for unknown mirror. 

options(repos = c(CRAN = "https://cloud.r-project.org"))

```

## Download and load libraries

```{r echo=TRUE, message=FALSE, warning=FALSE}
if(!require("DBI")) install.packages("DBI") 
if(!require("dplyr")) install.packages("dplyr") 
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("RSQLite")) install.packages("RSQLite")

library(DBI) 
library(dplyr) 
library(tidyverse)
library(RSQLite)
```

# Connect to the provided SQLite Database

```{r echo=TRUE}
conn <- dbConnect(RSQLite::SQLite(), "ICA_2023.sqlite")
```

# List tables in the database

Initial view of the content in the database:

```{r}
dbListTables(conn)
```

# Query 1: Retrieve the first 10 rows from the 'projects' table

```{r}
result <- dbGetQuery(conn, "SELECT * FROM projects LIMIT 10")  
knitr::kable(result)
```

# Query 1: Retrieve the first 10 rows from the 'customers' table

```{r}
result <- dbGetQuery(conn, "SELECT * FROM customers LIMIT 10")  
knitr::kable(result)
```

# Query 1: Retrieve the first 10 rows from the 'developers' table

```{r}
result <- dbGetQuery(conn, "SELECT * FROM developers LIMIT 10")  
knitr::kable(result)
```

# Query 1: Retrieve the first 10 rows from the 'assets' table

```{r}
result <- dbGetQuery(conn, "SELECT * FROM assets LIMIT 10")  
knitr::kable(result)
```

# Query 1: Retrieve the first 10 rows from the 'timelines' table

```{r}
result <- dbGetQuery(conn, "SELECT * FROM timelines LIMIT 10")  
knitr::kable(result)
```

# 

# Don't forget to disconnect from the database

```{r}
dbDisconnect(conn)
```
