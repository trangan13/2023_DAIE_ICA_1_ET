\#' @title 1_Local_SQLite.R

\#' @description Connecting querying and modifying a local SQLite DB file

\#' @author NMCG

\#' @bugs None

\#' @keywords SQL, DBI, query, execute, tabular, local

\#' @see <https://cran.r-project.org/web/packages/RSQLite/vignettes/RSQLite.html>

\#' @seealso <https://datacarpentry.org/R-ecology-lesson/05-r-and-databases.html>

## Clear console on each execute

```{r echo=TRUE}
# Clear console on each execute 
cat('\014')
```

```{r echo=FALSE}
# Set a CRAN mirror for package installation, this was done as I was getting an error for unknown mirror. 

options(repos = c(CRAN = "https://cloud.r-project.org"))

```

## Download and load libraries

```{r echo=TRUE, message=FALSE, warning=FALSE}
if(!require("DBI")) install.packages("DBI") 
if(!require("dplyr")) install.packages("dplyr") 
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("RSQLite")) install.packages("RSQLite")

library(DBI) 
library(dplyr) 
library(tidyverse)
library(RSQLite)
```

# Connect to the provided SQLite Database

```{r echo=TRUE}
conn <- dbConnect(RSQLite::SQLite(), "ICA_2023.sqlite")
```

# Part A: Introduction

In the first part of the assestment, we will write basic SQL queries to extract meaningful insights from a database related to game development projects. To start with this process, I have gained some general context by viewing the tables which has helped in understanding their relationship to begin crafting the queries. All findings will be presented in a Quarto Notebook.

# Core Queries 

# Query 1: Total Budget and Project Count per Country

```{r echo=FALSE}

# SQL query 
query <- "
SELECT 
  c.CustomerCountry, 
  SUM(p.Budget) AS TotalBudget, 
  COUNT(p.ProjectID) AS ProjectCount
FROM 
  Projects p
JOIN 
  Customers c ON p.CustomerID = c.CustomerID
GROUP BY 
  c.CustomerCountry
ORDER BY 
  TotalBudget DESC;
"

# Executing the query and assigning results to variable
result <- dbGetQuery(conn, query)

knitr::kable(result)

```

# Query 2: Average project development time by number of assets

```{r echo=FALSE}

# SQL query 
query <- "
SELECT 
  COUNT(a.AssetID) AS NumberOfAssets, 
  AVG(julianday(p.EndDate) - julianday(p.StartDate)) AS AverageDevelopmentTime
FROM 
  Projects p
JOIN 
  Assets a ON p.ProjectID = a.ProjectID
GROUP BY 
  NumberOfAssets;
"

# Executing the query and assigning results to variable
result <- dbGetQuery(conn, query)

knitr::kable(result)
```

# Query 3: Top three developers based on successful project count

```{r echo=FALSE}

# SQL query 
query <- "
SELECT 
  d.Name, 
  COUNT(pd.ProjectID) AS SuccessfulProjects
FROM 
  Developers d
JOIN 
  ProjectDevelopers pd ON d.DeveloperID = pd.DeveloperID
JOIN 
  Projects p ON pd.ProjectID = p.ProjectID
WHERE 
  p.Status = 'Completed'
GROUP BY 
  d.DeveloperID
ORDER BY 
  SuccessfulProjects DESC
LIMIT 3;
"

# Executing the query and assigning results to variable
result <- dbGetQuery(conn, query)

knitr::kable(result)
```

# Disconnect from the database

```{r}
dbDisconnect(conn)
```
